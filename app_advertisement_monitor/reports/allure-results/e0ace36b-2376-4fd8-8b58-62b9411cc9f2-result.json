{"name": "新建案详情页推荐广告", "status": "failed", "statusDetails": {"message": "AssertionError: expression is not True, message:", "trace": "self = <test_cases.test_build_detail_page.TestBuiDetailPage object at 0x00000209FA6F53A0>\n\n    @allure.title('新建案详情页推荐广告')\n    def test_recommend_build_detail_page(self):\n        \"\"\"\n        测试新建案详情页推荐楼盘是否可以点击\n        \"\"\"\n        # 进入新建案搜索页\n        self.build_searchpage.into_search_page()\n        # 输入建案名称,并点击搜索\n        self.build_searchpage.input_content_search(self.build_hid[1])\n        # 进入详情页\n        self.build_homepage.image_exist_and_click(self.build_hid[2], self.build_detailpage.file_path)\n        # 判断推荐建案是否存在\n        sleep(2)\n        self.build_detailpage.swipe_up()\n        self.build_detailpage.clear_login_pop_up()\n        self.build_detailpage.img_wait_click(self.build_detailpage.surrounding_img)\n        self.build_detailpage.swipe_up()\n>       assert_true(self.build_detailpage.image_wait_and_click(self.recommend_build_img, self.build_detailpage.file_path))\n\ntest_cases\\test_build_detail_page.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nE:\\python\\lib\\site-packages\\airtest\\utils\\logwraper.py:124: in wrapper\n    res = f(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nexpr = False, msg = '', snapshot = True\n\n    @logwrap\n    def assert_true(expr, msg=\"\", snapshot=True):  # noqa\n        \"\"\"\n        Assert expression is True ( bool(expr) is True )\n        Note that this is equivalent to bool(expr) is True and not to expr is True (use assertIs(expr, True) for the latter).\n    \n        :Example:\n    \n            >>> assert_true(1==1, msg=\"assert 1==1\")\n        \"\"\"\n>       assert bool(expr), \"expression is not True, message: %s\" % msg\nE       AssertionError: expression is not True, message:\n\nE:\\python\\lib\\site-packages\\airtest\\core\\assertions.py:100: AssertionError"}, "description": "\n        测试新建案详情页推荐楼盘是否可以点击\n        ", "attachments": [{"name": "log", "source": "ff30ff45-6ea9-4fe8-8a8d-52d57c6626fb-attachment.txt", "type": "text/plain"}], "start": 1704885799657, "stop": 1704885850973, "uuid": "6e539097-2725-49de-b5f4-12966e1074fc", "historyId": "954c3e864572afb7bc89609115e2e22e", "testCaseId": "9cc88970e17348e936a7567fde9eb4b6", "fullName": "test_cases.test_build_detail_page.TestBuiDetailPage#test_recommend_build_detail_page", "labels": [{"name": "feature", "value": "新建案详情页"}, {"name": "epic", "value": "APP广告监控"}, {"name": "tag", "value": "@pytest.mark.usefixtures('init_setup2')"}, {"name": "parentSuite", "value": "test_cases"}, {"name": "suite", "value": "test_build_detail_page"}, {"name": "subSuite", "value": "TestBuiDetailPage"}, {"name": "host", "value": "D012022050333"}, {"name": "thread", "value": "20388-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases.test_build_detail_page"}]}